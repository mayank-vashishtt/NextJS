nextJS is own by vercel 



framework vs library topic

React is a library focused on building user interfaces, 
while Next.js is a framework that builds on React and provides additional features 
like routing, server-side rendering, and static site generation. Next.js offers a more complete, 
opinionated setup for full-stack web development.



NextJS was a framework that was introduced because of some minor inconviniences in React

some imp ones are 
1.In a React project, you have to maintain a separate Backend project for your API routes
2.React does not provide out of the box routing (you have to use react-router-dom)
3.React is not SEO Optimised, earlier it was a big problem 
4.Waterfalling problem



# React is not SEO Optimised
Google/Bing has a bunch of crawlers that hit websites and figure out what the website does. 

It ranks it on Google based on the HTML it gets back
The crawlers DONT usually run your JS and render your page to see the final output. 

While Googlebot can run JavaScript, dynamically generated content is harder for the scraper to index


What does the Googlebot get back when they visit a website written in react?
Googlebot has no idea on what the project is. It only sees Vite + React + TS in the original HTML response.
Ofcourse when the JS file loads eventually, things get rendered but the Googlebot doesn’t discover this content very well.


#Waterfalling problem

1.Fetching the index.html from the CDN
2.Fetching script.js from CDN
3.Checking if user is logged in (if not, redirect them to /login page)
4.Fetching the actual blogs

There are 4 round trips that happen one after the other (sequentially)

The "waterfalling problem" in React, and more broadly in web development, 
refers to a scenario where data fetching operations are chained or dependent on each other in a way 
that leads to inefficient loading behavior.

what does next.js do? 

1.Fetching the index.html from the CDN and it have all the data (for blogging website all the blogs)
2.then script.js and all 


-----------

if you want your website to be SEO optimised then use Next otherwise react as next is expensive while hosting 

--------


Next.js provides you the following upsides over React

1. Server side rendering - Get’s rid of SEO problems
2.API routes - Single codebase with frontend and backend
3.File based routing (no need for react-router-dom)
4.Bundle size optimisations, Static site generation
5.Maintained by the Vercel tea

Downsides - 
1.Can’t be distributed via a CDN, always needs a server running that does server side rendering and hence is expensive
2.Very opinionated, very hard to move out of it


----- 

npx create-next-app@latest

next.config.mjs - Nextjs configuration file
tailwind.config.js - Tailwind configuration file
app - Contains all your code/components/layouts/routes/apis

npm run dev


------ 


next have a file based router
Next.js is a React framework that provides a file-based routing system. 
This means that the structure of your files and folders within the pages directory determines 
the routes of your application. 
For example, if you have a file named about.js in the pages directory, it will automatically be available at the /about route.

This approach simplifies the process of defining routes, as you don't need to manually configure them in a separate routing file. 
Instead, you just create files and folders that match the desired URL structure.


--------

Server side rendering

its first html page have a lot of things to know what is this 

Now if GoogleBot tries to scrape your page, it’ll understand that this is a signup page without running any Javascript.
The first index.html file it get’s back will have context about the page since it was server side rendered


-------------------

in next.js even for the things which we dont have any route , we can have default 404 page too 



-------------------


layouts 

You’ll notice a file in your app folder called layout.tsx

Layouts let you wrap all child pages inside some logic.

it means now if you write something above children in this file then it will come to every file 

----------------------

Layouts in sub routes

basically this to make nav bar or something like that banner or footer for certain pages  

--------------------

Merging routes 
What if you wan’t to get the banner in both signup and signin?


first approach : 

You can access the routes at 
http://localhost:3000/auth/signup and http://localhost:3000/auth/signin


fo that make a auth folder and put the both signin and signout folder in it
then put layout.tsx there in the auth folder


second approach: 

without changing the routes ...  ? 

You can use create a new folder with () around the name. 
This folder is ignored by the router.'

just replace folder auth by (auth)



----------------------

components directory


basically put all the logic there in the component folder 
and just call in the app folder where we were doing before 


and onclick handler use case with "use client" 


-----------------

Client and server components


NextJS expects you to identify all your components as either client or server

As the name suggests
Server components are rendered on the server
Client components are pre-rendered and are pushed to the client to be rendered again

By default, all components are server components.

if you wan’t to mark a component as a client component, you need to add the following to the top of the component - 
"use client"


----------------

When should you create client components ?

Whenever you get an error that tells you that you need to create a client component
Whenever you’re using something that the server doesn’t understand (useEffect, useState, onClick…)


RULE OF THUMB 
a component structure for a web application. It highlights the hierarchical layout of components, 
starting from the top-level Layout component, which branches into Nav, Page, and Footer. Under Nav, there are Logo and Links, 
with Links labeled as a "Client Module." The Page component contains Posts, with a "Client Module" called LikeButton. 
The use of "Client Module" likely indicates interactive or client-side functionality for these components. 
This structure is typical in modular web development frameworks.



client page is not SEO Optimised
so we should create a file button that is use client 
so rest sign in is SEO optimised

You defer the client as much it is possible 


---------------

metdata --- 

Metadata is like a label or a tag that gives information about other data. 
For example, if you have a photo, the metadata might include the date it was taken, the location, and the camera settings. 
It's information about the information.


but is good to use server side rather then meta tag as how much will you say in meta tag



